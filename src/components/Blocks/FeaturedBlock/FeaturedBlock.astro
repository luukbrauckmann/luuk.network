---
import type { FeaturedBlockFragment } from "@generated/datocms";
import { Image } from '@datocms/astro';
import { Button, LinkArea } from "@components";
import LinkBlock from "../LinkBlock/LinkBlock.astro";

type Props = {
  block: FeaturedBlockFragment;
};

const { block } = Astro.props;
---

<enhanced-featured-block>
    <section class="featured-block">
        <h2>{ block.title }</h2>

        <div class="featured-block-list-container">
            <ul class="featured-block-list">
        { block.pages.map((page) => (
            <li class="featured-block-list-item">
                <LinkArea>
                  { (page?.content?.__typename === 'ProjectPageRecord' && page?.content?.image?.responsiveImage) && (
                        <Image
                            imgClass="featured-block-list-item__image"
                            data={page.content.image.responsiveImage}
                            srcSetCandidates={[
                            0.05, 0.1, 0.15, 0.2, 0.25, 0.3,
                            0.35, 0.4, 0.45, 0.5,
                            0.55, 0.6, 0.65, 0.7,
                            0.75, 0.8, 0.85, 0.9,
                            0.95, 1
                            ]}
                            sizes="536px"
                        />
                    ) }
                    <div class="featured-block-list-item__details">
                        <h3 class="featured-block-list-item__title">{page.title}</h3>
                        <!-- <p class="featured-block-list-item__description">{page.description}</p> -->

                        <div>
                            <Button
                                as="a"
                                href={page.path}
                                data-astro-prefetch
                                icon="arrow-right"
                                variant="transparent"
                            >Read more <span class="sr-only">about {page.title}</span></Button>
                        </div>
                    </div>
                </LinkArea>
            </li>
        ))}
            </ul>
        </div>

        { block.link && (
            <div>
                <LinkBlock block={block.link} />
            </div>
        ) }
    </section>
</enhanced-featured-block>

<style>
    .featured-block {
        padding:  var(--spacing-xxl) var(--spacing-lg);
        border: 1px solid oklch(0.269 0.042 263);
        margin: -1px;
        display: flex;
        flex-direction: column;
        gap: var(--spacing-xl);
    }

    .featured-block-list-container {
        position: relative;
        margin-inline: calc(var(--spacing-lg) * -1);
        overflow-x: hidden;
    }

    .featured-block-list {
        list-style-type: "";
        padding: 0;
        padding-inline: var(--spacing-lg);
        margin: 0;
        display: flex;
        gap: var(--spacing-md);
        overflow-x: auto;
        scroll-snap-type: x mandatory;
        overscroll-behavior-x: contain;
    }

    .featured-block-list-container::before {
        content: '';
        position: absolute;
        inset-block: 0px;
        inset-inline-start: 0px;
        background: linear-gradient(to right, oklch(0.269 0.042 263), transparent);
        width: var(--spacing-md);
        opacity: 0;
        transition: opacity 0.3s ease;
        pointer-events: none;
        z-index: 1;
    }

    .featured-block-list-container::after {
        content: '';
        position: absolute;
        inset-block: 0px;
        inset-inline-end: 0px;
        background: linear-gradient(to left, oklch(0.269 0.042 263), transparent);
        width: var(--spacing-md);
        opacity: 0;
        transition: opacity 0.3s ease;
        pointer-events: none;
        z-index: 1;
    }

    .featured-block-list-container--left-overflow::before {
        opacity: 1;
    }

    .featured-block-list-container--right-overflow::after {
        opacity: 1;
    }

    .featured-block-list-item {
        scroll-snap-align: center;
        flex: 0 0 100%;
        display: flex;
        flex-direction: column;
    }

   .featured-block-list-item :global(.featured-block-list-item__image) {
        max-block-size: 200px;
        object-fit: cover;
        object-position: top;
    }

    .featured-block-list-item__details {
        background-color: #415A77;
        padding: var(--spacing-lg) var(--spacing-md);
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        gap: var(--spacing-md);
        justify-content: space-between;
    }

    .featured-block-list-item__title {
        text-wrap: initial;
    }

    .featured-block-list-item__description {
        flex: 1;
    }
</style>

<script>
    class EnhancedFeaturedBlock extends HTMLElement {
        list: HTMLElement | null = null;
        container: HTMLElement | null = null;

        constructor() {
            super();
        }

        connectedCallback() {
            this.list = this.querySelector('.featured-block-list');
            this.container = this.querySelector('.featured-block-list-container');

            if (this.list && this.container) {
                this.checkOverflow();
                this.list.addEventListener('scroll', () => this.checkOverflow());
                window.addEventListener('resize', () => this.checkOverflow());
            }
        }

        disconnectedCallback() {
            if (this.list) {
                this.list.removeEventListener('scroll', () => this.checkOverflow());
                window.removeEventListener('resize', () => this.checkOverflow());
            }
        }

        checkOverflow() {
            if (!this.list || !this.container) return;

            const { scrollLeft, scrollWidth, clientWidth } = this.list;

            // Check if there's content to the left (scrolled right)
            const hasLeftOverflow = scrollLeft > 0;

            // Check if there's content to the right (can scroll right)
            const hasRightOverflow = scrollLeft < (scrollWidth - clientWidth);

            // Apply classes based on overflow state
            this.container.classList.toggle('featured-block-list-container--left-overflow', hasLeftOverflow);
            this.container.classList.toggle('featured-block-list-container--right-overflow', hasRightOverflow);
        }
    }

    customElements.define('enhanced-featured-block', EnhancedFeaturedBlock);
</script>
